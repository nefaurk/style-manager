const LayerType = {
	Page: "MSPage",
	Artboard: "MSArtboardGroup",
	Group: "MSLayerGroup",
	ShapeGroup: "MSShapeGroup",
	ShapePath: "MSShapePathLayer",
	Text: "MSTextLayer",
};


// Helper functions:

var filteredLayersInDocument = function(doc, predicate, filterFunction) {
	var filteredLayers = NSMutableArray.alloc().init();
	
	var pages = doc.pages;
	for (var i = 0; i < pages.length; i++) {
		var page = pages[i];
		filteredLayers.addObjectsFromArray(filteredLayersOnPage(page, predicate, filterFunction));
	}
	
	return filteredLayers;
}

var filteredLayersOnPage = function(page, predicate, filterFunction) {
	var scope = page.sketchObject.children();
	var layers = scope.filteredArrayUsingPredicate(predicate);
	
	var filteredLayers = layers.allObjects();
	
	if (filterFunction != null) {
		var filteredLayers = NSMutableArray.alloc().init();
		var layerLoop = layers.objectEnumerator(), layer;
		while (layer = layerLoop.nextObject()) {
			if (filterFunction(layer)) {
				filteredLayers.push(layer);
			}
		}
	}
	
	return filteredLayers;
}

var getAllSharedTextStyles = function(doc) {
  var textStyles = doc.sketchObject.documentData().layerTextStyles();
	
	var sharedStyles = [];
	var numStyles = textStyles.numberOfSharedStyles();
	for (var i = 0; i < numStyles; i++) {
		var sharedStyle = textStyles.sharedStyleAtIndex(i);
		sharedStyles.push(sharedStyle);
	}
	
	return sharedStyles;
};

// Find other text layers with the same text style and update them to match this layer's attributes, preserving overrides
var updateSharedTextStyleUsingTextLayerAttributes = function(doc, textStyleID, sharedStyle, textLayer) {
	var predicate = NSPredicate.predicateWithFormat("(style.sharedObjectID == %@)", textStyleID);
	var filteredLayers = filteredLayersInDocument(doc, predicate, function(layer) {
		return (layer != textLayer);
	});
	
	var newStyle = textLayer.style();
	for (var i = 0; i < filteredLayers.length; i++) {
		var layerToUpdate = filteredLayers[i];
		var style = layerToUpdate.style();
		var attributes = style.textStyle().attributes();
		var sharedAttributes = sharedStyle.style().textStyle().attributes();
		var newAttributes = newStyle.textStyle().attributes();

		// Determine which attributes should be updated (and which ones should be preserved)
		var replacementAttributes = NSMutableDictionary.alloc().init();
		var hasOverrides = false;
		for (var key in sharedAttributes) {
			var value = attributes[key];
			var sharedValue = sharedAttributes[key];
			var newValue = newAttributes[key];
			var replacementValue = null;
			
			var preserveOverrides = false;
			if (value == null || sharedValue == null) {
				if (value != sharedValue) {
					preserveOverrides = true;
				}
			} else if (!value.isEqualTo(sharedValue)) {
				preserveOverrides = true;
			}
			
			if (preserveOverrides) {
				// Preserve overrides
				hasOverrides = true;
				replacementValue = value;
			} else {
				replacementValue = newValue;
			}
			
			replacementAttributes[key] = replacementValue;
		}
		
		if (hasOverrides) {
			layerToUpdate.style().textStyle().setAttributes(replacementAttributes);
		} else {
			layerToUpdate.style().setTextStyle(newStyle.textStyle());
		}
	}
	
	// Update the shared text style to match this layer's attributes
	sharedStyle.updateToMatch(newStyle);
	// doc.reloadInspector(); // TODO: Remove?
};

var showReplaceStyleDialog = function(doc, textStyles) {
	var viewWidth = 300;
	var viewHeight = 54;
	var controlHeight = 22;
	var verticalSpacing = 10;
	var horizontalSpacing = 10;
	
	var dialog = COSAlertWindow.new();
	dialog.setMessageText("Select the style and replacement style");
	dialog.addButtonWithTitle("Replace");
	dialog.addButtonWithTitle("Cancel");

	var view = NSView.alloc().initWithFrame(NSMakeRect(0, 0, viewWidth, viewHeight));
	dialog.addAccessoryView(view);
	
	var y = 0;
	var labelWidth = 64;
	var dropdownWidth = viewWidth - labelWidth - horizontalSpacing;
	
	var replaceLabel = NSTextField.alloc().initWithFrame(NSMakeRect(0, y, labelWidth, controlHeight));
	replaceLabel.setBezeled(false);
	replaceLabel.setDrawsBackground(false);
	replaceLabel.setEditable(false);
	replaceLabel.setSelectable(false);
	replaceLabel.setStringValue("Replace: ");
	
	var replaceDropdown = NSPopUpButton.alloc().initWithFrame(NSMakeRect(labelWidth + horizontalSpacing, y, dropdownWidth, controlHeight));
	for (var textStyle of textStyles) {
		var textStyleDescription = textStyle.name();
		replaceDropdown.addItemWithTitle(textStyleDescription);
	}
	
	y += controlHeight + verticalSpacing;
 
	var findLabel = NSTextField.alloc().initWithFrame(NSMakeRect(0, y, labelWidth, controlHeight));
	findLabel.setBezeled(false);
	findLabel.setDrawsBackground(false);
	findLabel.setEditable(false);
	findLabel.setSelectable(false);
	findLabel.setStringValue("Find: ");
	
	var findDropdown = NSPopUpButton.alloc().initWithFrame(NSMakeRect(labelWidth + horizontalSpacing, y, dropdownWidth, controlHeight));
	for (var textStyle of textStyles) {
		var textStyleDescription = textStyle.name();
		findDropdown.addItemWithTitle(textStyleDescription);
	}

	view.addSubview(findLabel);
	view.addSubview(findDropdown);
	view.addSubview(replaceLabel);
	view.addSubview(replaceDropdown);
	
	var response = dialog.runModal();
	if (response == "1000") {
		var oldStyle = textStyles[findDropdown.indexOfSelectedItem()];
		var newStyle = textStyles[replaceDropdown.indexOfSelectedItem()];
		replaceStyleWithStyle(doc, oldStyle, newStyle);
	}
};

var replaceStyleWithStyle = function(doc, oldSharedStyle, newSharedStyle) {
	var oldStyleID = oldSharedStyle.style().sharedObjectID();
	var predicate = NSPredicate.predicateWithFormat("(style.sharedObjectID == %@)", oldStyleID);
	var filteredLayers = filteredLayersInDocument(doc, predicate, null);
	
	for (var i = 0; i < filteredLayers.length; i++) {
		var layerToUpdate = filteredLayers[i];
		var style = layerToUpdate.style();
		var attributes = style.textStyle().attributes();
		var sharedAttributes = oldSharedStyle.style().textStyle().attributes();
		var newAttributes = newSharedStyle.style().textStyle().attributes();

		// Determine which attributes should be updated (and which ones should be preserved)
		var overrideAttributes = NSMutableDictionary.alloc().init();
		var hasOverrides = false;
		for (var key in sharedAttributes) {
			var value = attributes[key];
			var sharedValue = sharedAttributes[key];
			var newValue = newAttributes[key];
			var overrideValue = null;
			var hasOverrides = false;
			
			if (value == null || sharedValue == null) {
				if (value != sharedValue) {
					hasOverrides = true;
				}
			} else if (!value.isEqualTo(sharedValue)) {
				hasOverrides = true;
			}
			
			if (hasOverrides) {
				// Preserve overrides
				overrideValue = value;
				if (key == "NSFont") {
					// log(value); // TODO: Figure out how to support custom font (weight) overrides
				}
			} else {
				overrideValue = newValue;
			}
			overrideAttributes[key] = overrideValue;
		}
		
		var newStyle = newSharedStyle.style();
		var newStyleCopy = newSharedStyle.style().copy();
		if (hasOverrides) {
			layerToUpdate.setStyle(newStyleCopy);
			layerToUpdate.style().textStyle().setAttributes(overrideAttributes);
		} else {
			layerToUpdate.setStyle(newStyleCopy);
		}
	}
	
	var textStyles = doc.sketchObject.documentData().layerTextStyles();
	textStyles.removeSharedStyle(oldSharedStyle);
};

// TODO: FINISH THIS
var textLayersInDocWithStyle = function(doc, styleID) {
	var pages = doc.pages;
	for (var page in pages) {
		log(page);
	}
	return null;
};


// Handlers:

var inspectStyle = function(context) {
	var sketch = context.api();
	var doc = sketch.selectedDocument;
  var textStyles = doc.sketchObject.documentData().layerTextStyles();
	var selectedLayers = doc.selectedLayers;
	
	if (selectedLayers.length != 1) {
		doc.sketchObject.showMessage("You must select exactly one text layer to use this command.");
	} else {
		selectedLayers.iterate(function(layer) {
			if (layer.sketchObject.className() != "MSTextLayer") {
				doc.sketchObject.showMessage("You must select exactly one text layer to use this command.");
			} else {
				var textLayer = layer.sketchObject;
				var textStyle = textLayer.style();
				var textStyleID = textStyle.sharedObjectID();
				var summary = "(No style)";
				
				if (textStyleID != null) {
					var sharedStyle = textStyles.sharedObjectWithID(textStyleID);
					log(textStyle);
					log(sharedStyle.style());
					
					var predicate = NSPredicate.predicateWithFormat("(style.sharedObjectID == %@)", textStyleID);
					var filteredLayers = filteredLayersInDocument(doc, predicate, null);
					var numInstances = filteredLayers.length;
					
					var textAttributes = textStyle.textStyle().attributes();
					var sharedAttributes = sharedStyle.style().textStyle().attributes();
					
					var differingAttributes = [];
					for (var key in sharedAttributes) {
						var value = textAttributes[key];
						var sharedValue = sharedAttributes[key];
						
						var hasDifferingAttributes = false;
						if (value == null || sharedValue == null) {
							if (value != sharedValue) {
								hasDifferingAttributes = true;
							}
						} else if (!value.isEqualTo(sharedValue)) {
							hasDifferingAttributes = true;
						}
						
						if (hasDifferingAttributes) {
							differingAttributes.push(key);
						}
					}
					
					summary = textStyleID + ": " + sharedStyle.name() + " (" + numInstances + " instances)";
					if (differingAttributes.length > 0) {
						summary += ". Overrides in this instance: " + differingAttributes.join(", ") + ".";
					}
				}
				
				doc.sketchObject.showMessage(summary);
			}
		});
	}
}

var updateStyle = function(context) {
	var sketch = context.api();
	var doc = sketch.selectedDocument;
  var textStyles = doc.sketchObject.documentData().layerTextStyles();
	var selectedLayers = doc.selectedLayers;
	
	if (selectedLayers.length != 1) {
		doc.sketchObject.showMessage("You must select exactly one text layer to use this command.");
	} else {
		selectedLayers.iterate(function(layer) {
			if (layer.sketchObject.className() != "MSTextLayer") {
				doc.sketchObject.showMessage("You must select exactly one text layer to use this command.");
			} else {
				var textLayer = layer.sketchObject;
				var textStyleID = textLayer.style().sharedObjectID();
				if (textStyleID == null) {
					doc.sketchObject.showMessage("You must select a text layer with a text style to use this command.");
				} else {
					var sharedStyle = textStyles.sharedObjectWithID(textStyleID);
					var sharedStyleName = sharedStyle.name();
				
					updateSharedTextStyleUsingTextLayerAttributes(doc, textStyleID, sharedStyle, textLayer);
					doc.sketchObject.showMessage("Updated shared text style: " + sharedStyleName);
				}
			}
		});
	}
}

var selectLayersWithSameAttributes = function(context) {
	var sketch = context.api();
	var doc = sketch.selectedDocument;
	var selectedLayers = doc.selectedLayers;
	
	if (selectedLayers.length != 1) {
		doc.sketchObject.showMessage("You must select exactly one text layer to use this command.");
	} else {
		selectedLayers.iterate(function(selectedLayer) {
			if (selectedLayer.sketchObject.className() != "MSTextLayer") {
				doc.sketchObject.showMessage("You must select exactly one text layer to use this command.");
			} else {
				var textLayer = selectedLayer.sketchObject;
				var attributesToFind = textLayer.style().textStyle().attributes();
				
				var predicate = NSPredicate.predicateWithFormat("(className == %@)", LayerType.Text);
				var filteredLayers = filteredLayersInDocument(doc, predicate, function(layer) {
					var attributes = layer.style().textStyle().attributes();
					var hasSameAttributes = true;
					for (var key in attributes) {
						var value = attributes[value];
						var referenceValue = attributesToFind[key];
						
						// TODO: FINISH THIS
						
						if (value == null) {
							log(key + " is null for: " + layer.name());
							log("Layer style: " + layer.style());
						}
						// if (value == null && referenceValue == null) {
						// 	hasSameAttributes = true;
						// } else if (value.isEqualTo(referenceValue)) {
						// 	hasSameAttributes = true;
						// } else {
						// 	hasSameAttributes = false;
						// 	break;
						// }
					}
					return hasSameAttributes;
				});
			}
		});
	}
}

var selectLayersWithStyle = function(context) {
	var sketch = context.api();
	var doc = sketch.selectedDocument;
	doc.sketchObject.showMessage("Not implemented yet!");
}

var replaceStyle = function(context) {
	var sketch = context.api();
	var doc = sketch.selectedDocument;
	var textStyles = getAllSharedTextStyles(doc);
	
	showReplaceStyleDialog(doc, textStyles);
}

var mergeDuplicateStyles = function(context) {
	var sketch = context.api();
	var doc = sketch.selectedDocument;
	doc.sketchObject.showMessage("Not implemented yet!");
}

var importStyles = function(context) {
	var sketch = context.api();
	var doc = sketch.selectedDocument;
	
	// Show a file picker dialog
	var app = NSApp.delegate();
	var openPanel = NSOpenPanel.openPanel();
	openPanel.setAllowedFileTypes(["json"]);
	openPanel.setCanChooseDirectories(true);
	openPanel.setCanChooseFiles(true);
	openPanel.setCanCreateDirectories(true);
	openPanel.setTitle("Choose a file");
	openPanel.setPrompt("Choose");
	openPanel.runModal();

	// Open the selected file (TODO: Handle errors)
	var path = openPanel.URLs().firstObject().path();
	var fileContents = NSString.stringWithContentsOfFile(path);
	var stylesContents = JSON.parse(fileContents.toString());
	var styles = stylesContents.styles;
	
	if (styles.length > 0) {
		var textStyles = doc.sketchObject.documentData().layerTextStyles();
		var styleReplacements = {};
		for (var i = 0; i < styles.length; i++) {
			var textStyleID = styles[i].sharedObjectID;
			var name = styles[i].name;
			
			var family = styles[i].font;
			var size = styles[i].size;
			var spacing = styles[i].spacing;
			var textTransform = styles[i].textTransform;
			var lineHeight = styles[i].lineHeight;
			var paragraphSpacing = styles[i].paragraphSpacing;
			var alignment = styles[i].alignment;
			var verticalAlignment = styles[i].verticalAlignment;
			var strikethrough = styles[i].strikethrough;
			var underline = styles[i].underline;

			var red = styles[i].color.red;
			var green = styles[i].color.green;
			var blue = styles[i].color.blue;
			var alpha = styles[i].color.alpha;
			var color = null;
			if (isNaN(red) != true) {
				var color = MSImmutableColor.alloc().initWithRed_green_blue_alpha(red, green, blue, alpha);
			}

			var rectTextFrame = NSMakeRect(0, 0, 250, 50);
			var dummyTextLayer = MSTextLayer.alloc().initWithFrame(rectTextFrame);
			dummyTextLayer.name = name;
			dummyTextLayer.stringValue = name + " " + size + "px";
			dummyTextLayer.fontPostscriptName = family;
			dummyTextLayer.fontSize = size;
			dummyTextLayer.setCharacterSpacing(spacing);
			if (textTransform != null) {
				dummyTextLayer.addAttribute_value("MSAttributedStringTextTransformAttribute", textTransform);
			}
			dummyTextLayer.setLineHeight(lineHeight);
			// log(dummyTextLayer.paragraphStyle()); // TODO: paragraphSpacing
			dummyTextLayer.textAlignment = alignment;
			dummyTextLayer.setVerticalAlignment(verticalAlignment);
			if (strikethrough != null) {
				dummyTextLayer.addAttribute_value("NSStrikethrough", strikethrough);
			}
			if (underline != null) {
				dummyTextLayer.addAttribute_value("NSUnderline", underline);
			}
			if (color != null) {
				dummyTextLayer.addAttribute_value("MSAttributedStringColorAttribute", color);
			}
			var attributes = dummyTextLayer.style().textStyle().attributes();
			
			var sharedStyle = textStyles.sharedObjectWithID(textStyleID);
			if (sharedStyle == null) {
				log("Unable to find text style by ID: " + name + "(" + textStyleID + ")");
			} else {
				var textStyleName = sharedStyle.name();
				for (var j = 0; j < textStyles.numberOfSharedObjects(); j++) {
					var object = textStyles.sharedObjectAtIndex(j);
					var objectName = object.name();
					var objectID = object.objectID();
					if (!objectID.isEqualTo(textStyleID)) {
						if (objectName.isEqualTo(textStyleName)) {
							log("Duplicate found with name \"" + textStyleName + "\" (" + objectID + ")");
							styleReplacements[objectID] = textStyleID;
						}
					}
				}
				
				log("Updating text style by ID: " + name + "(" + textStyleID + ")");
				updateSharedTextStyleUsingTextLayerAttributes(doc, textStyleID, sharedStyle, dummyTextLayer);
				sharedStyle.name = name;
			}
		}
		
		// Merge duplicate styles
		for (var duplicateID in styleReplacements) {
			var canonicalID = styleReplacements[duplicateID];
			var duplicateStyle = textStyles.sharedObjectWithID(duplicateID);
			var canonicalStyle = textStyles.sharedObjectWithID(canonicalID);
			replaceStyleWithStyle(doc, duplicateStyle, canonicalStyle);
		}
		
		doc.sketchObject.showMessage("Imported " + styles.length + " styles!");
	} else {
		doc.sketchObject.showMessage("There are no styles defined in this file!");
	}
}

var exportStyles = function(context) {
	var sketch = context.api();
	var doc = sketch.selectedDocument;
	
	var textStyleObjects = doc.sketchObject.documentData().layerTextStyles().objects();
	var textStyles = [];
	for (var i = 0; i < textStyleObjects.count(); i++) {
		var style = textStyleObjects.objectAtIndex(i);
		var textStyleID = style.style().sharedObjectID();
		var attributes = style.style().textStyle().attributes();
		var verticalAlignment = style.style().textStyle().verticalAlignment();
		
		textStyles.push({
			"textStyleID": textStyleID,
			"attributes": attributes,
			"verticalAlignment": verticalAlignment,
			"textStyle": style,
			"name": style.name(),
		});
	}

	if (textStyles.length > 0) {
		var save = NSSavePanel.savePanel();
		save.setNameFieldStringValue("Text Styles.json");
		save.setAllowedFileTypes([@"json"]);
		save.setAllowsOtherFileTypes(false);
		save.setExtensionHidden(false);

		if (save.runModal()) {
			var styles = [];
			for (var i = 0; i < textStyles.length; i++) {
				var textStyle = textStyles[i];

				var textStyleID = String(textStyle.textStyleID);
				var name = String(textStyle.name);
				
				var family = String(textStyle.attributes.NSFont.fontDescriptor().objectForKey(NSFontNameAttribute));
				var size = String(textStyle.attributes.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute)) * 1;
				var spacing = String(textStyle.attributes.NSKern) * 1;
				var verticalAlignment = textStyle.verticalAlignment;
				var strikethrough = String(textStyle.attributes.NSStrikethrough) * 1;
				var underline = String(textStyle.attributes.NSUnderline) * 1;

				var alignment = null;
				var lineHeight = null;
				var paragraphSpacing = null;
				var paragraphStyle = textStyle.attributes.NSParagraphStyle;
				if (paragraphStyle != null) {
					alignment = paragraphStyle.alignment();
					lineHeight = paragraphStyle.maximumLineHeight();
					paragraphSpacing = paragraphStyle.paragraphSpacing();
				}

				var textTransform = null;
				var textTransformAttribute = textStyle.attributes.MSAttributedStringTextTransformAttribute;
				if (textTransformAttribute != null) {
					textTransform = String(textStyle.attributes.MSAttributedStringTextTransformAttribute) * 1;
				} else {
					textTransform = 0;
				}
				
				var color = textStyle.attributes.MSAttributedStringColorAttribute;
				if (color != null) {
					var red = color.red();
					var green = color.green();
					var blue = color.blue();
					var alpha = color.alpha();
				}

				styles.push({
					sharedObjectID: textStyleID,
					name: name,
					font: family,
					size: size,
					color: {
						red: red,
						green: green,
						blue: blue,
						alpha: alpha,
					},
					alignment: alignment,
					verticalAlignment: verticalAlignment,
					spacing: spacing,
					lineHeight: lineHeight,
					paragraphSpacing: paragraphSpacing,
					textTransform: textTransform,
					strikethrough: strikethrough,
					underline: underline,
				});

			};

			var fileData = {"styles": styles};
			var path = save.URL().path();
			var file = NSString.stringWithString(JSON.stringify(fileData));
			file.writeToFile_atomically_encoding_error(path, true, NSUTF8StringEncoding, null);
			
			doc.sketchObject.showMessage("Exported text styles to: " + path);
		}
	} else {
		doc.sketchObject.showMessage("There are no text styles to export!");
	}
}
